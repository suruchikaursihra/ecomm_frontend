[{"/var/www/html/netmeds_frontend/src/index.js":"1","/var/www/html/netmeds_frontend/src/App.js":"2","/var/www/html/netmeds_frontend/src/reportWebVitals.js":"3","/var/www/html/netmeds_frontend/src/routes/RouteComponent.js":"4","/var/www/html/netmeds_frontend/src/shared/constants/routes.js":"5","/var/www/html/netmeds_frontend/src/shared/spinner/spinner.js":"6","/var/www/html/netmeds_frontend/src/shared/services/spinner.service.js":"7","/var/www/html/netmeds_frontend/src/components/Login/LoginComponent.js":"8","/var/www/html/netmeds_frontend/src/components/Dashboard/DashboardComponent.js":"9","/var/www/html/netmeds_frontend/src/routes/ProtectedRoute.js":"10","/var/www/html/netmeds_frontend/src/shared/validator/formValidator.js":"11","/var/www/html/netmeds_frontend/src/shared/validator/validationRules.js":"12","/var/www/html/netmeds_frontend/src/shared/constants/messages.js":"13","/var/www/html/netmeds_frontend/src/configuration/index.js":"14","/var/www/html/netmeds_frontend/src/shared/services/api.service.js":"15","/var/www/html/netmeds_frontend/src/redux/reducer.js":"16","/var/www/html/netmeds_frontend/src/components/Header/HeaderComponent.js":"17","/var/www/html/netmeds_frontend/src/components/Footer/FooterComponent.js":"18","/var/www/html/netmeds_frontend/src/redux/rootReducer.js":"19","/var/www/html/netmeds_frontend/src/redux/store.js":"20","/var/www/html/netmeds_frontend/src/utils/localStorage.js":"21","/var/www/html/netmeds_frontend/src/container/auth.js":"22","/var/www/html/netmeds_frontend/src/components/Cart/CartComponent.js":"23","/var/www/html/netmeds_frontend/src/components/Cart/ReviewComponent.js":"24"},{"size":570,"mtime":1608270819475,"results":"25","hashOfConfig":"26"},{"size":233,"mtime":1608270915669,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1608104115705,"results":"28","hashOfConfig":"26"},{"size":1123,"mtime":1608230623453,"results":"29","hashOfConfig":"26"},{"size":225,"mtime":1608230465549,"results":"30","hashOfConfig":"26"},{"size":1920,"mtime":1608126004258,"results":"31","hashOfConfig":"26"},{"size":2402,"mtime":1608126209531,"results":"32","hashOfConfig":"26"},{"size":6471,"mtime":1608294010145,"results":"33","hashOfConfig":"26"},{"size":7481,"mtime":1608294400966,"results":"34","hashOfConfig":"26"},{"size":683,"mtime":1608224736851,"results":"35","hashOfConfig":"26"},{"size":2928,"mtime":1608146421450,"results":"36","hashOfConfig":"26"},{"size":1139,"mtime":1608134834286,"results":"37","hashOfConfig":"26"},{"size":652,"mtime":1608134410331,"results":"38","hashOfConfig":"26"},{"size":585,"mtime":1608290353375,"results":"39","hashOfConfig":"26"},{"size":793,"mtime":1608135728908,"results":"40","hashOfConfig":"26"},{"size":1142,"mtime":1608288873655,"results":"41","hashOfConfig":"26"},{"size":7213,"mtime":1608294558975,"results":"42","hashOfConfig":"26"},{"size":844,"mtime":1608221674192,"results":"43","hashOfConfig":"26"},{"size":158,"mtime":1608212980522,"results":"44","hashOfConfig":"26"},{"size":626,"mtime":1608280468484,"results":"45","hashOfConfig":"26"},{"size":1073,"mtime":1608225610868,"results":"46","hashOfConfig":"26"},{"size":351,"mtime":1608224689846,"results":"47","hashOfConfig":"26"},{"size":8755,"mtime":1608294811520,"results":"48","hashOfConfig":"26"},{"size":4258,"mtime":1608294815496,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"7sd1c2",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},"/var/www/html/netmeds_frontend/src/index.js",[],["107","108"],"/var/www/html/netmeds_frontend/src/App.js",[],"/var/www/html/netmeds_frontend/src/reportWebVitals.js",[],"/var/www/html/netmeds_frontend/src/routes/RouteComponent.js",[],"/var/www/html/netmeds_frontend/src/shared/constants/routes.js",[],"/var/www/html/netmeds_frontend/src/shared/spinner/spinner.js",[],"/var/www/html/netmeds_frontend/src/shared/services/spinner.service.js",[],"/var/www/html/netmeds_frontend/src/components/Login/LoginComponent.js",[],"/var/www/html/netmeds_frontend/src/components/Dashboard/DashboardComponent.js",["109","110"],"import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { withRouter } from \"react-router-dom\";\nimport { withStyles } from '@material-ui/core/styles';\nimport HeaderComponent from '../Header/HeaderComponent';\nimport FooterComponent from '../Footer/FooterComponent';\nimport { spinnerService } from '../../shared/services/spinner.service';\nimport { CallApi } from \"../../shared/services/api.service\";\nimport CONFIG from '../../configuration/index';\nimport { connect } from \"react-redux\";\nimport Alert from '@material-ui/lab/Alert';\n\n/**\n     * @description  ccs for dashboard\n     */\nconst useStyles = (theme) => ({\n    icon: {\n        marginRight: theme.spacing(2),\n    },\n    heroContent: {\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(3, 0, 1),\n    },\n    cardGrid: {\n        paddingTop: theme.spacing(8),\n        paddingBottom: theme.spacing(8),\n    },\n    card: {\n        height: '100%',\n        display: 'flex',\n        backgroundColor: 'rgb(246, 250, 232)',\n        flexDirection: 'column',\n    },\n    cardMedia: {\n        paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n        flexGrow: 1,\n    },\n    book: {\n        backgroundColor: 'blue',\n        color: 'white',\n    },\n    alert: {\n        padding: '0px 5px',\n        borderRadius: '24px',\n    }\n});\n\nexport class DashboardComponent extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            testList: [],\n            showAlert: false\n        }\n    }\n\n    /**\n     * @description  This function updates the intial page after mounting \n     */\n    componentDidMount() {\n        this._isMounted = true;\n        this.getTestLists();\n    }\n\n    /**\n     * @description  This function gets the medical tests lists\n     * @param {null} null\n     * @return {setState} set testList\n     */\n    getTestLists = () => {\n        let Data = {\n            token: this.props.token,\n            user_id: this.props.user_id\n        }\n\n        CallApi(\"POST\", CONFIG.getTestsList, Data)\n            .then((response) => {\n                spinnerService.hide('Oval');\n                if (response.responseCode === 200) {\n                    this.setState({ testList: response.data })\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    /**\n     * @description  This function updates the form input fields\n     * @param {lists} lists search data \n     * @return {setState} set testList\n     */\n    updateTestsLists = (lists) => {\n        this.setState({ testList: lists });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    /**\n     * @description  This function save the cart data into backend redis cache\n     * @param {ele} ele medical test object\n     * @return {setState} set alert\n     */\n    saveToRedis(ele) {\n        this.props.addToCart({ ele });\n        this.setState({ showAlert: false });\n        let Data = {\n            items: ele,\n            token: this.props.token,\n            user_id: this.props.user_id\n        }\n\n        CallApi(\"POST\", CONFIG.saveToRedis, Data)\n            .then((response) => {\n                if (response.responseCode === 200) {\n                    this.setState({ showAlert: true });\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    }\n\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <React.Fragment>\n                <HeaderComponent updateTestsLists={this.updateTestsLists} />\n                <main>\n                    <div className={classes.heroContent}>\n                        <Typography component=\"h3\" variant=\"h4\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                            Lab Tests\n                        </Typography>\n                    </div>\n                    <Container className={classes.cardGrid} maxWidth=\"md\">\n                        {this.state.showAlert ? <Alert severity=\"success\">Your Test is been added to the cart</Alert> : ''}\n                        <br />\n                        <Grid container spacing={4}>\n                            {this.state.testList.map((ele) => (\n                                <Grid item xs={12} sm={6} md={4} key={ele.id}>\n                                    <Card className={classes.card}>\n                                        <CardContent className={classes.cardContent}>\n                                            <Typography variant=\"h6\" gutterBottom>\n                                                {ele.itemName}\n                                            </Typography>\n                                            <Typography variant=\"caption\" display=\"block\">\n                                                PRICE: ₹{ele.minPrice}\n                                            </Typography>\n                                            {ele.labName ? <Typography variant=\"caption\" display=\"block\">\n                                                Lab Name: {ele.labName}\n                                            </Typography> : ''}\n                                            <Typography variant=\"caption\" display=\"block\">\n                                                CATEGORY: {ele.category}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            {ele.popular == 'TRUE' ? <Alert variant=\"outlined\" severity=\"success\" className={classes.alert}>Popular</Alert> : ''}\n                                            <Button className={classes.book} color=\"primary\" onClick={e => { this.saveToRedis(ele) }}>\n                                                Book\n                                            </Button>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            ))}\n                            {this.state.testList.length == 0 ? <Typography variant=\"h6\" gutterBottom>\n                                No Tests Found !\n                                            </Typography> : ''}\n                        </Grid>\n                    </Container>\n                </main>\n                <FooterComponent />\n            </React.Fragment>\n        )\n    }\n}\n\n/**\n     * @description  this function gets the token from redux store\n     * @param {state} state returned by store\n     * @return {cartItems,token,user_id} \n     */\nconst mapStateToProps = state => {\n    return { token: state.token, user_id: state.user_id, cartItems: state.cartItems };\n};\n\n/**\n     * @description  this function gets the object to dispatch an action\n     * @param {dispatch} dispatch returned by store\n     * @return {addToCart} \n     */\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addToCart: (payload) => dispatch({ type: 'ADD_TO_CART', payload })\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(useStyles)(DashboardComponent)))\n","/var/www/html/netmeds_frontend/src/routes/ProtectedRoute.js",[],"/var/www/html/netmeds_frontend/src/shared/validator/formValidator.js",[],"/var/www/html/netmeds_frontend/src/shared/validator/validationRules.js",["111","112"],"/**\n * @author Suruchi Kaur Sihra\n * @file Form Validaton Rules\n * @flow\n */\nimport * as Messages from '../constants/messages';\n\n/**\n * @description  Rules for login Form\n */\nexport const LoginValidation = {\n    email: {\n        rules: [{\n            test: value => {\n                return value.trim();\n            },\n            message: Messages.VALIDATION.EMAIL_ERRORS.blankFieldError\n        },\n        {\n            test: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            message: Messages.VALIDATION.EMAIL_ERRORS.nameFieldError\n        },\n        ],\n        errors: [],\n        valid: false,\n        state: \"\"\n    },\n    password: {\n        rules: [\n            {\n                test: value => {\n                    return value.trim();\n                },\n                message: Messages.VALIDATION.PASSWORD_ERRORS.blankFieldError\n            },\n            {\n                test: value => {\n                    return value.length > 6;\n                },\n                message: Messages.VALIDATION.PASSWORD_ERRORS.maxLengthError\n            }],\n        errors: [],\n        valid: false,\n        state: \"\"\n    }\n};","/var/www/html/netmeds_frontend/src/shared/constants/messages.js",[],["113","114"],"/var/www/html/netmeds_frontend/src/configuration/index.js",[],"/var/www/html/netmeds_frontend/src/shared/services/api.service.js",[],"/var/www/html/netmeds_frontend/src/redux/reducer.js",["115"],"\nconst initialState = {\n}\n\nconst reducer = (state = initialState, action) => {\n\n    const newState = { ...state };\n\n    switch (action.type) {\n        case 'ADD_TO_CART':\n            return { ...state, cartItems: Array.from(new Set([...state.cartItems, action.payload.ele])) }\n\n        case 'RESET_CART':\n            console.log((\"hcsucbsjfgsjfg\"));\n            return { ...state, cartItems: [] }\n\n        case 'DELETE_FROM_CART':\n            return { ...state, cartItems: state.cartItems.filter(item => item !== action.payload.ele) }\n\n        case 'SAVE_TOKEN':\n            console.log(action.payload.cartItems);\n            return { ...state, token: action.payload.token, user_id: action.payload.user_id, cartItems: action.payload.cartItems }\n\n        case 'CALCULATE_PAYMENT_AMOUNT':\n            let amount = 0;\n            state.cartItems.map(ele => {\n                amount = amount + ele.minPrice\n            });\n            return { ...state, paymentAmount: amount }\n\n        case 'LOGOUT':\n            localStorage.clear();\n            return initialState\n        default:\n            return newState;\n    }\n}\n\nexport default reducer;","/var/www/html/netmeds_frontend/src/components/Header/HeaderComponent.js",["116"],"import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { withRouter } from \"react-router-dom\";\nimport { fade } from '@material-ui/core/styles';\nimport ShoppingCartTwoToneIcon from '@material-ui/icons/ShoppingCartTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Button } from '@material-ui/core';\nimport { spinnerService } from '../../shared/services/spinner.service';\nimport { CallApi } from \"../../shared/services/api.service\";\nimport CONFIG from '../../configuration/index';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport ROUTES from '../../shared/constants/routes';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\n\n/**\n     * @description  Css for header\n     */\nconst useStyles = (theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    cart: {\n        color: 'white'\n    },\n    title: {\n        flexGrow: 3,\n        fontSize: 'xx-large',\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    button: {\n        backgroundColor: 'rgb(246, 250, 232)',\n        marginRight: '100px',\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 1),\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n});\n\nexport class HeaderComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            search: ''\n        }\n    }\n\n    /**\n     * @description  This function serach tests\n     * @param {null} \n     * @return {Call Parent Function}\n     */\n    searchTests = () => {\n        let Data = {\n            user_id: this.props.user_id,\n            token: localStorage.getItem('token'),\n            search: this.state.search\n        }\n\n        CallApi(\"POST\", CONFIG.searchTestsList, Data)\n            .then((response) => {\n                spinnerService.hide('Oval');\n                if (response.responseCode === 200) {\n                    this.props.updateTestsLists(response.data)\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    /**\n     * @description  This function updates the form input fields\n     * @param {value} value value \n     * @return {setState} set alert\n     */\n    onChange = (value) => {\n        this.setState({ search: value });\n        if (value == '') {\n            this.searchTests();\n        }\n    }\n\n    /**\n     * @description  This function logouts\n     * @param {null}\n     * @return {call redux cleanup} cleanup and redirect\n     */\n    logout = () => {\n        this.props.logout();\n        this.props.history.push(ROUTES.LOGIN);\n    }\n\n    /**\n     * @description  This function redirects to cart\n     * @param {null} \n     * @return {redirect} \n     */\n    goToCart = () => {\n        this.props.history.push(ROUTES.MYCART);\n    }\n\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"overline\" display=\"block\" noWrap>\n                            <Button type=\"button\" color=\"primary\" varient=\"contained\" className={classes.button} onClick={() => this.logout()}>Logout</Button>\n                        </Typography>\n                        <Typography className={classes.title} variant=\"h6\" noWrap>\n                            Netmeds\n                        </Typography>\n                        {this.props.updateTestsLists ?\n                            <React.Fragment>\n                                <div className={classes.search}>\n                                    <div className={classes.searchIcon}>\n                                        <SearchIcon />\n                                    </div>\n                                    <InputBase\n                                        placeholder=\"Search…\"\n                                        classes={{\n                                            root: classes.inputRoot,\n                                            input: classes.inputInput,\n                                        }}\n                                        onChange={e => this.onChange(e.target.value)}\n                                        inputProps={{ 'aria-label': 'search' }}\n                                    />\n                                </div>\n                                <Button type=\"button\" color=\"primary\" varient=\"contained\" className={classes.button} onClick={() => this.searchTests()}> Search</Button>\n                                <IconButton className={classes.cart} aria-label=\"add to cart\" onClick={e => this.goToCart()}>\n                                    <Badge badgeContent={this.props.cartItems ? this.props.cartItems.length : ''} color=\"secondary\">\n                                        <ShoppingCartTwoToneIcon />\n                                    </Badge>\n                                </IconButton>\n                            </React.Fragment>\n                            : ''}\n                    </Toolbar>\n                </AppBar>\n            </div >\n        )\n    }\n}\n\n/**\n     * @description  this function gets the token from redux store\n     * @param {state} state returned by store\n     * @return {user_id,token,cartItems} \n     */\nconst mapStateToProps = (state) => {\n    return {\n        user_id: state.user_id,\n        token: state.token,\n        cartItems: state.cartItems\n    }\n}\n\n/**\n     * @description  this function gets the object to dispatch an action\n     * @param {dispatch} dispatch returned by store\n     * @return {logout} \n     */\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        logout: () => dispatch({ type: 'LOGOUT' })\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(useStyles)(HeaderComponent)))\n","/var/www/html/netmeds_frontend/src/components/Footer/FooterComponent.js",[],"/var/www/html/netmeds_frontend/src/redux/rootReducer.js",[],["117","118"],"/var/www/html/netmeds_frontend/src/redux/store.js",[],"/var/www/html/netmeds_frontend/src/utils/localStorage.js",[],"/var/www/html/netmeds_frontend/src/container/auth.js",[],"/var/www/html/netmeds_frontend/src/components/Cart/CartComponent.js",["119"],"import React, { Component } from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ReviewComponent from \"./ReviewComponent\";\nimport FooterComponent from \"../Footer/FooterComponent\";\nimport BackspaceRoundedIcon from '@material-ui/icons/BackspaceRounded';\nimport IconButton from '@material-ui/core/IconButton';\nimport ROUTES from '../../shared/constants/routes';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { connect } from 'react-redux';\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport { spinnerService } from '../../shared/services/spinner.service';\nimport { CallApi } from \"../../shared/services/api.service\";\nimport CONFIG from '../../configuration/index';\n\nconst useStyles = (theme) => ({\n    layout: {\n        width: \"auto\",\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 600,\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(6),\n            marginBottom: theme.spacing(6),\n            padding: theme.spacing(3),\n        },\n    },\n    stepper: {\n        padding: theme.spacing(3, 0, 5),\n    },\n    buttons: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n    },\n    listItem: {\n        padding: theme.spacing(1, 0),\n    },\n    total: {\n        fontWeight: 700,\n    },\n});\n\nexport class CartComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeStep: 0,\n            orderId: '',\n            order_items: [],\n            total_amount: 0,\n            steps: ['Review Your Order']\n        }\n    }\n\n    /**\n     * @description  this function set page step count\n     * @param {step} step current step\n     * @return {component} \n     */\n    getStepContent = (step) => {\n        switch (step) {\n            case 0:\n                return <ReviewComponent />;\n            default:\n                throw new Error(\"Unknown step\");\n        }\n    }\n\n    /**\n     * @description  this function redirect to dashboard\n     * @param {null} \n     * @return {Redirect} \n     */\n    backToDashbaord = () => {\n        this.props.history.push(ROUTES.DASHBOARD);\n    }\n\n    /**\n     * @description  next button after review\n     * @param {null}\n     * @return {resetCart} \n     */\n    handleNext = () => {\n        this.setState({ activeStep: this.state.activeStep + 1 })\n        this.placeOrder();\n        this.props.resetCart();\n    };\n\n    /**\n     * @description This function calls backend api to save order \n     * @param {null} \n     * @return {setState} \n     */\n    placeOrder = () => {\n        let Data = {\n            token: this.props.token,\n            items: this.props.cartItems,\n            user_id: this.props.user_id,\n            paymentAmount: this.props.paymentAmount\n        }\n        spinnerService.show('Oval');\n        CallApi(\"POST\", CONFIG.placeOrder, Data)\n            .then((response) => {\n                if (response.responseCode === 200) {\n                    this.setState({ orderId: response.data.order_id, order_items: response.data.order_items, total_amount: response.data.amount })\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n\n        CallApi(\"POST\", CONFIG.resetRedis, Data)\n            .then((response) => {\n                spinnerService.hide('Oval');\n            }).catch(function (error) {\n                console.log(error);\n            });\n\n    }\n\n    /**\n     * @description  back button after review\n     * @param {null}\n     * @return {resetCart} \n     */\n    handleBack = () => {\n        this.setState({ activeStep: this.state.activeStep - 1 })\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <React.Fragment>\n                <main className={classes.layout}>\n                    <Paper className={classes.paper}>\n                        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                            Checkout\n                    </Typography>\n                        <Typography variant=\"overline\" display=\"block\" noWrap>\n                            <IconButton onClick={() => this.backToDashbaord()} size=\"small\">\n                                <BackspaceRoundedIcon />\n                        Back\n                        </IconButton>\n                        </Typography>\n                        <React.Fragment>\n                            {this.state.activeStep === this.state.steps.length ? (\n                                <React.Fragment>\n                                    <Typography variant=\"h5\" gutterBottom>\n                                        Thank you for your order.\n                                </Typography>\n                                    <ListItemText primary={`Your order has been Placed Successfully ORDER ID- ${this.state.orderId} `} />\n\n                                    {this.state.order_items.map((ele) => (\n                                        <ListItem className={classes.listItem} key={ele.id}>\n                                            <ListItemText primary={ele.item_id} />\n                                            <Typography variant=\"body2\">₹{ele.min_price}</Typography>\n                                        </ListItem>\n                                    ))}\n                                    <ListItem className={classes.listItem}>\n                                        <ListItemText primary=\"Total\" />\n                                        <Typography variant=\"subtitle1\" className={classes.total}>\n                                            ₹ {this.state.total_amount}\n                                        </Typography>\n                                    </ListItem>\n\n                                </React.Fragment>\n                            ) : (\n                                    <React.Fragment>\n                                        {this.getStepContent(this.state.activeStep)}\n                                        <div className={classes.buttons}>\n                                            {this.state.activeStep !== 0 && (\n                                                <Button onClick={() => this.handleBack()} className={classes.button}>\n                                                    Back\n                                                </Button>\n                                            )}\n                                            {this.props.cartItems.length > 0 && (\n                                                <Button\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    onClick={() => this.handleNext()}\n                                                    className={classes.button}\n                                                >\n                                                    {this.state.activeStep === this.state.steps.length - 1 ? \"Place order\" : \"Next\"}\n                                                </Button>\n                                            )}\n\n                                        </div>\n                                    </React.Fragment>\n                                )}\n                        </React.Fragment>\n                    </Paper>\n                </main>\n                <FooterComponent />\n            </React.Fragment>\n        )\n    }\n}\n\n/**\n     * @description  this function gets the token from redux store\n     * @param {state} state returned by store\n     * @return {cartItems,paymentAmount,token,user_id} \n     */\nconst mapStateToProps = (state) => {\n    return { cartItems: state.cartItems, paymentAmount: state.paymentAmount, token: state.token, user_id: state.user_id }\n}\n/**\n     * @description  this function gets the object to dispatch an action\n     * @param {dispatch} dispatch returned by store\n     * @return {resetCart} \n     */\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        resetCart: () => dispatch({ type: 'RESET_CART' }),\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(useStyles)(CartComponent)))\n","/var/www/html/netmeds_frontend/src/components/Cart/ReviewComponent.js",["120","121"],"import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { spinnerService } from '../../shared/services/spinner.service';\nimport { CallApi } from \"../../shared/services/api.service\";\nimport ROUTES from '../../shared/constants/routes';\nimport CONFIG from '../../configuration/index';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\n\n/**\n * \n * @discription CSs for Review cart\n */\nconst useStyles = (theme) => ({\n    listItem: {\n        padding: theme.spacing(1, 0),\n    },\n    total: {\n        fontWeight: 700,\n    },\n    title: {\n        marginTop: theme.spacing(2),\n    },\n});\n\nexport class ReviewComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            paymentAmount: 0\n        }\n    }\n\n    componentDidMount() {\n        this.props.calculatePaymentAmount()\n    }\n\n    /**\n     * @description  this function delete data from backend redis cache\n     * @param {ele} ele test object\n     * @return {null} \n     */\n    removeFromRedis(ele) {\n        let Data = {\n            user_id: this.props.user_id,\n            token: this.props.token,\n            item: ele\n        }\n        CallApi(\"POST\", CONFIG.removeFromRedis, Data)\n            .then((response) => {\n                if (response.responseCode === 200) {\n\n                }\n            }).catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <React.Fragment>\n                <Typography variant=\"h6\" gutterBottom>\n                    Order summary\n                </Typography>\n                <List disablePadding>\n                    {this.props.cartItems.length > 0 ? <React.Fragment>\n                        {this.props.cartItems.map((ele) => (\n                            <ListItem className={classes.listItem} key={ele.id}>\n                                <ListItemText primary={ele.itemName} secondary={ele.labName} />\n                                <Typography variant=\"body2\">₹{ele.minPrice}</Typography>\n                                <IconButton aria-label=\"delete from cart\" onClick={e => { this.props.deleteFromCart({ ele }); this.props.calculatePaymentAmount(); this.removeFromRedis(ele) }}>\n                                    <DeleteForeverIcon />\n                                </IconButton>\n                            </ListItem>\n                        ))}\n                        <ListItem className={classes.listItem}>\n                            <ListItemText primary=\"Total\" />\n                            <Typography variant=\"subtitle1\" className={classes.total}>\n                                ₹ {this.props.paymentAmount}\n                            </Typography>\n                        </ListItem>\n                    </React.Fragment>\n                        : <Typography variant=\"body2\">No Items in cart.</Typography>}\n                </List>\n            </React.Fragment >\n        )\n    }\n}\n\n/**\n     * @description  this function gets the token from redux store\n     * @param {state} state returned by store\n     * @return {cartItems,paymentAmount,token,user_id} \n     */\nconst mapStateToProps = (state) => {\n    return { cartItems: state.cartItems, paymentAmount: state.paymentAmount, token: state.token, user_id: state.user_id }\n}\n/**\n     * @description  this function gets the object to dispatch an action\n     * @param {dispatch} dispatch returned by store\n     * @return {deleteFromCart,calculatePaymentAmount} \n     */\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deleteFromCart: (payload) => dispatch({ type: 'DELETE_FROM_CART', payload }),\n        calculatePaymentAmount: () => dispatch({ type: 'CALCULATE_PAYMENT_AMOUNT' })\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(withStyles(useStyles)(ReviewComponent)))\n",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":169,"column":58,"nodeType":"128","messageId":"129","endLine":169,"endColumn":60},{"ruleId":"126","severity":1,"message":"127","line":177,"column":57,"nodeType":"128","messageId":"129","endLine":177,"endColumn":59},{"ruleId":"130","severity":1,"message":"131","line":20,"column":26,"nodeType":"132","messageId":"133","endLine":20,"endColumn":27,"suggestions":"134"},{"ruleId":"130","severity":1,"message":"131","line":20,"column":42,"nodeType":"132","messageId":"133","endLine":20,"endColumn":43,"suggestions":"135"},{"ruleId":"122","replacedBy":"136"},{"ruleId":"124","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":26,"column":37,"nodeType":"140","messageId":"141","endLine":26,"endColumn":39},{"ruleId":"126","severity":1,"message":"127","line":127,"column":19,"nodeType":"128","messageId":"129","endLine":127,"endColumn":21},{"ruleId":"122","replacedBy":"142"},{"ruleId":"124","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":14,"column":10,"nodeType":"146","messageId":"147","endLine":14,"endColumn":18},{"ruleId":"144","severity":1,"message":"148","line":9,"column":10,"nodeType":"146","messageId":"147","endLine":9,"endColumn":24},{"ruleId":"144","severity":1,"message":"149","line":11,"column":8,"nodeType":"146","messageId":"147","endLine":11,"endColumn":14},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["152","153"],["154","155"],["150"],["151"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["150"],["151"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'spinnerService' is defined but never used.","'ROUTES' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"156","fix":"157","desc":"158"},{"messageId":"159","fix":"160","desc":"161"},{"messageId":"156","fix":"162","desc":"158"},{"messageId":"159","fix":"163","desc":"161"},"removeEscape",{"range":"164","text":"165"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"166","text":"167"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"168","text":"165"},{"range":"169","text":"167"},[436,437],"",[436,436],"\\",[452,453],[452,452]]